///////////////////////////////////////////////////////////////////////////////////////////////////
// DROP TABLES
////////////////////////////////////////////////////////////////////////////////////////////////////
DROP TABLE ISSUES_440;
DROP TABLE RESERVATIONS_440;
DROP TABLE COPIES_440;
DROP TABLE BOOK_AUTHORS_440;
DROP TABLE BOOKS_440;
DROP TABLE USERS_440;
DROP TABLE ROLES_440;
DROP TABLE CATEGORIES_440;
DROP TABLE SECTIONS_440;
DROP TABLE PUBLISHERS_440;
DROP TABLE LANGUAGES_440;
DROP TABLE AUTHORS_440;


////////////////////////////////////////////////////////////////////////////////////////////////////
// CREATE TABLES
////////////////////////////////////////////////////////////////////////////////////////////////////

// Create table AUTHORS with constraints.
CREATE TABLE AUTHORS_440(
    AUTHOR_ID           VARCHAR(6)  CONSTRAINT AUTHORS_PK PRIMARY KEY, 
    AUTHOR_NAME		    VARCHAR(30) NOT NULL, 
    AUTHOR_BIOGRAPHY    VARCHAR(100),
    BIRTH_DATE          DATE,
    DEATH_DATE          DATE
    );
    
// Create table LANGUAGES with constraints.
CREATE TABLE LANGUAGES_440(
    LANGUAGE_ID         VARCHAR(6)  CONSTRAINT LANGUAGES_PK PRIMARY KEY, 
    LANGUAGE_NAME		VARCHAR(30) NOT NULL
    );

// Create table PUBLISHERS with constraints.
CREATE TABLE PUBLISHERS_440(
    PUBLISHER_ID    VARCHAR(6)  CONSTRAINT PUBLISHERS_PK PRIMARY KEY, 
    PUBLISHER_NAME	VARCHAR(30) NOT NULL,
    BIOGRAPHY       VARCHAR(100),
    CONTACT         INTEGER,
    ADDRESS         VARCHAR(30)
    );
    
// Create table SECTIONS with constraints.
CREATE TABLE SECTIONS_440(
    SECTION_ID      VARCHAR(6)  CONSTRAINT SECTIONS_PK PRIMARY KEY,
    SECTION_NAME    VARCHAR(30) NOT NULL
    );
    
// Create table CATEGORIES with constraints.
CREATE TABLE CATEGORIES_440(
    CATEGORY_ID      VARCHAR(6)     CONSTRAINT CATEGORIES_PK PRIMARY KEY,
    CATEGORY_NAME    VARCHAR(30)    NOT NULL,
    SECTION_ID       VARCHAR(6)     CONSTRAINT CAT_SEC_FK REFERENCES SECTIONS_440(SECTION_ID)
    );

// Create table ROLES with constraints.
CREATE TABLE ROLES_440(
    ROLE_ID      VARCHAR(6)     CONSTRAINT ROLES_PK PRIMARY KEY,
    ROLE_NAME    VARCHAR(30)    NOT NULL
    );

// Create table USERS with constraints.
CREATE TABLE USERS_440(
    USER_ID       VARCHAR(6)    CONSTRAINT USERS_PK PRIMARY KEY,
    USER_NAME     VARCHAR(30)   NOT NULL,
    USER_PASSWORD CHAR(12)      NOT NULL,
    USER_EMAIL    VARCHAR(30)   CONSTRAINT USER_EMAIL_UK UNIQUE,
    ROLE_ID       VARCHAR(6)    CONSTRAINT USER_ROLE_FK REFERENCES ROLES_440(ROLE_ID),
    CONTACT       INTEGER       CONSTRAINT USER_CONTACT_UK UNIQUE,
    ADDRESS       VARCHAR(30)
    );
    
// Create table BOOKS with constraints.
CREATE TABLE BOOKS_440(
    BOOK_ID             VARCHAR(6)  CONSTRAINT BOOKS_PK PRIMARY KEY, 
    BOOK_TITLE 		    VARCHAR(30) NOT NULL, 
    ISBN 			    INTEGER     CONSTRAINT ISBN_UK  UNIQUE,
    PUBLICATION_YEAR 	INTEGER     NOT NULL,
    NUMBER_OF_COPIES    INTEGER     NOT NULL,
    BOOK_DESCRIPTION 	VARCHAR(100) NOT NULL,
    COVER_IMAGE_LINK 	VARCHAR(30),
    LANGUAGE_ID 	    VARCHAR(6)  CONSTRAINT BOOK_LANGUAGE_FK REFERENCES LANGUAGES_440(LANGUAGE_ID),
    PUBLISHER_ID 	    VARCHAR(6)  CONSTRAINT BOOK_PUBLISHER_FK REFERENCES PUBLISHERS_440(PUBLISHER_ID),
    SECTION_ID          VARCHAR(6)  CONSTRAINT BOOK_SECTION_FK REFERENCES SECTIONS_440(SECTION_ID),
    CATEGORY_ID 	    VARCHAR(6)  CONSTRAINT BOOK_CATEGORY_FK REFERENCES CATEGORIES_440(CATEGORY_ID)
    );
 
// Create table BOOK_AUTHORS with constraints.
CREATE TABLE BOOK_AUTHORS_440(
    BOOK_ID     VARCHAR(6)  CONSTRAINT BOOK_AUTHORS_BOOK_FK REFERENCES BOOKS_440(BOOK_ID),
    AUTHOR_ID   VARCHAR(6)  CONSTRAINT BOOK_AUTHORS_AUTHOR_FK REFERENCES AUTHORS_440(AUTHOR_ID),
    CONSTRAINT BOOKR_AUTHOR_PK PRIMARY KEY (BOOK_ID, AUTHOR_ID)
    );
    
// Create table COPIES with constraints.
CREATE TABLE COPIES_440(
    COPY_ID   VARCHAR(6)    CONSTRAINT COPIES_PK PRIMARY KEY,
    BOOK_ID   VARCHAR(6)    CONSTRAINT COPY_BOOK_FK REFERENCES BOOKS_440(BOOK_ID)
    );    

// Create table RESERVATIONS with constraints.
CREATE TABLE RESERVATIONS_440(
    RESERVATION_ID   VARCHAR(6)    CONSTRAINT RESERVATIONS_PK PRIMARY KEY,
    USER_ID          VARCHAR(6)    CONSTRAINT RESERVATION_USER_FK REFERENCES USERS_440(USER_ID),
    COPY_ID          VARCHAR(6)    CONSTRAINT RESERVATION_COPY_FK REFERENCES COPIES_440(COPY_ID),
    RESERVATION_DATE DATE          NOT NULL,
    EXPIRY_DATE      DATE
    );  

// Create table ISSUES with constraints.
CREATE TABLE ISSUES_440(
    ISSUE_ID         VARCHAR(6)    CONSTRAINT ISSUES_PK PRIMARY KEY,
    USER_ID          VARCHAR(6)    CONSTRAINT ISSUE_USER_FK REFERENCES USERS_440(USER_ID),
    COPY_ID          VARCHAR(6)    CONSTRAINT ISSUE_COPY_FK REFERENCES COPIES_440(COPY_ID),
    ISSUE_DATE       DATE          NOT NULL,
    DUE_DATE         DATE          NOT NULL,
    RETURN_DATE      DATE,
    STATUS           VARCHAR(10)   NOT NULL,
    FINE_AMOUNT      NUMBER
    );  

////////////////////////////////////////////////////////////////////////////////////////////////////
// POPULATE EACH TABLE WITH 5 RECORDS
////////////////////////////////////////////////////////////////////////////////////////////////////

// TABLE AUTHORS_440

INSERT INTO AUTHORS_440(AUTHOR_ID,AUTHOR_NAME,AUTHOR_BIOGRAPHY) VALUES 
('N00001','SHAKESPEARE','Greatest writer in the English language.');

INSERT INTO AUTHORS_440(AUTHOR_ID,AUTHOR_NAME,AUTHOR_BIOGRAPHY,BIRTH_DATE,DEATH_DATE) VALUES 
('N00002','JANE AUSTEN','English novelist known for her six major novels.',TO_DATE('1775-07-01','YYYY-MM-DD'),TO_DATE('1817-02-12','YYYY-MM-DD'));

INSERT INTO AUTHORS_440 (AUTHOR_ID,AUTHOR_NAME,AUTHOR_BIOGRAPHY) VALUES 
('F00001','J.K.ROWLING','British author best known for writing the Harry Potter series.');

INSERT INTO AUTHORS_440 (AUTHOR_ID,AUTHOR_NAME,AUTHOR_BIOGRAPHY) VALUES 
('N00003','LEO TOLSTOY','A Russian novelist famous for epic novels in the exploration of human nature and society.');

INSERT INTO AUTHORS_440 (AUTHOR_ID,AUTHOR_NAME,AUTHOR_BIOGRAPHY) VALUES 
('S00013','CHARLES DARWIN','Darwin theory of evolution by natural selection revolutionized biology and life.');

INSERT INTO AUTHORS_440 (AUTHOR_ID,AUTHOR_NAME,AUTHOR_BIOGRAPHY,BIRTH_DATE,DEATH_DATE) VALUES 
('S00133','Stephen Hawking','Introduced complex cosmological concepts to the general public.',TO_DATE('1942','YYYY'),TO_DATE('2018','YYYY'));

INSERT INTO AUTHORS_440 (AUTHOR_ID,AUTHOR_NAME,AUTHOR_BIOGRAPHY,BIRTH_DATE,DEATH_DATE) VALUES 
('S03433','Oliver Sacks','A neurologist and author who explored human brain.',TO_DATE('1933-03-21','YYYY-MM-DD'),TO_DATE('2015-04-05','YYYY-MM-DD'));

INSERT INTO AUTHORS_440 (AUTHOR_ID,AUTHOR_NAME,AUTHOR_BIOGRAPHY,BIRTH_DATE,DEATH_DATE) VALUES 
('H05969','Desmond Morton','Canadian historian known for Canadian military and political history.',TO_DATE('1937','YYYY'),TO_DATE('2022','YYYY'));

  
// TABLE LANGUAGES_440
    
INSERT INTO LANGUAGES_440 (LANGUAGE_ID, LANGUAGE_NAME) VALUES (0001, 'ENGLISH');
INSERT INTO LANGUAGES_440 (LANGUAGE_ID, LANGUAGE_NAME) VALUES (0002, 'FRENCH');
INSERT INTO LANGUAGES_440 (LANGUAGE_ID, LANGUAGE_NAME) VALUES (0003, 'MANDARIN');
INSERT INTO LANGUAGES_440 (LANGUAGE_ID, LANGUAGE_NAME) VALUES (0004, 'PANJABI');
INSERT INTO LANGUAGES_440 (LANGUAGE_ID, LANGUAGE_NAME) VALUES (0005, 'SPANISH');
INSERT INTO LANGUAGES_440 (LANGUAGE_ID, LANGUAGE_NAME) VALUES (0006, 'TAMIL');
INSERT INTO LANGUAGES_440 (LANGUAGE_ID, LANGUAGE_NAME) VALUES (0007, 'RUSSIAN');

// TABLE PUBLISHERS_440
    
INSERT INTO PUBLISHERS_440 (PUBLISHER_ID,PUBLISHER_NAME,BIOGRAPHY,CONTACT,ADDRESS) VALUES 
(1466,'Penguin Random House','PUBLISHERS TO WORLD OVER 90 YEARS',8679055509,'13,HEART RD,NEWSOUTH WALES');

INSERT INTO PUBLISHERS_440 (PUBLISHER_ID,PUBLISHER_NAME,BIOGRAPHY,CONTACT,ADDRESS) VALUES 
(2246,'McClelland And Stewart','PUBLISHERS TO NATION OVER DECADES.',9059999999,'123,BRUNEL RD,MISSISSAUGA');

INSERT INTO PUBLISHERS_440 (PUBLISHER_ID,PUBLISHER_NAME,BIOGRAPHY,CONTACT,ADDRESS) VALUES 
(2324,'NOVEL PRINTERS','READERS FRIEND FOR 3 DEACADES.',6474327890,'96,BAKER ST,TORONTO');

INSERT INTO PUBLISHERS_440 (PUBLISHER_ID,PUBLISHER_NAME,BIOGRAPHY,CONTACT,ADDRESS) VALUES 
(3256,'John Murray','Publisher OF scholarly and educational books.',4359687770,'89,OXFORD ST, UK');

INSERT INTO PUBLISHERS_440 (PUBLISHER_ID,PUBLISHER_NAME,BIOGRAPHY,CONTACT,ADDRESS) VALUES 
(3456,'Bloomsbury','FAMOUS FOR FICTION, NON-FICTION AND ACADEMIC TITLES',9059999999,'12,CART RD,TORONTO');

INSERT INTO PUBLISHERS_440 (PUBLISHER_ID,PUBLISHER_NAME,BIOGRAPHY,CONTACT,ADDRESS) VALUES 
(3457,'Simon And Schuster','Wide range of genres, including fiction, non-fiction, and academic titles',6547892345,'2A,BEACHSURF RD,BRAMPTON');

INSERT INTO PUBLISHERS_440 (PUBLISHER_ID,PUBLISHER_NAME,BIOGRAPHY,CONTACT,ADDRESS) VALUES 
(7865,'HarperCollins','GLOBAL PUBLISHER FAMOUS FOR CHILDREN PUBLISHES',437859400,'3B,HEARTLAND RD,CALIFORNIA');


// TABLE SECTIONS_440
INSERT INTO SECTIONS_440(SECTION_ID,SECTION_NAME) VALUES ('11H','WORLD HISTORY');
INSERT INTO SECTIONS_440(SECTION_ID,SECTION_NAME) VALUES (1,'SIENCE');
INSERT INTO SECTIONS_440(SECTION_ID,SECTION_NAME) VALUES (2,'FICTION');
INSERT INTO SECTIONS_440(SECTION_ID,SECTION_NAME) VALUES (3,'FANTASY');
INSERT INTO SECTIONS_440(SECTION_ID,SECTION_NAME) VALUES (4,'NOVEL');
INSERT INTO SECTIONS_440(SECTION_ID,SECTION_NAME) VALUES ('5A','PICTURE BOOKS');
INSERT INTO SECTIONS_440(SECTION_ID,SECTION_NAME) VALUES ('5B','BOARD BOOKS');
INSERT INTO SECTIONS_440(SECTION_ID,SECTION_NAME) VALUES ('5C','EARLY READERS');

// TABLE CATEGORIES_440
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('PH678','PHYSICS',1);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('CH123','CHEMISTRY',1);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('HF001','HISTORICAL FICTION',2);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('RF005','REALIST FICTION',2);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('CF113','CHILDREN FICTION',2);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('CH145','CHILDREN',3);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('SC345','SOCIETY',3);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('N001','ROMANCE',4);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('N002','TRAGEDY',4);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('HM768','HUMAN EVOLUTION',1);
INSERT INTO CATEGORIES_440(CATEGORY_ID,CATEGORY_NAME,SECTION_ID) VALUES('H0234','CANADIAN HISTORY','11H');

// TABLE ROLES_440
INSERT INTO ROLES_440 (ROLE_ID,ROLE_NAME) VALUES (1,'LIBRARIAN');
INSERT INTO ROLES_440 (ROLE_ID,ROLE_NAME) VALUES (2,'MEMBER READER');
INSERT INTO ROLES_440 (ROLE_ID,ROLE_NAME) VALUES (3,'NON-MEMBER READER');
INSERT INTO ROLES_440 (ROLE_ID,ROLE_NAME) VALUES (4,'CATALOGER');
INSERT INTO ROLES_440 (ROLE_ID,ROLE_NAME) VALUES (5,'SYSTEM ADMINISTRATOR');
INSERT INTO ROLES_440 (ROLE_ID,ROLE_NAME) VALUES (6,'CIRCULATION CLERK');
INSERT INTO ROLES_440 (ROLE_ID,ROLE_NAME) VALUES (7,'LIBRARY ASSISTANT');

// TABLE USERS_440

INSERT INTO USERS_440 (USER_ID,USER_NAME,USER_PASSWORD,USER_EMAIL,ROLE_ID,CONTACT) VALUES 
(220005,'GILLIAND JOSEPH','12341234','gill.joseph@gmail.com',1,607678566);

INSERT INTO USERS_440 (USER_ID,USER_NAME,USER_PASSWORD,USER_EMAIL,ROLE_ID,CONTACT,ADDRESS) VALUES 
(200045,'PIYUMIKA BANDULA','Piyumika1994','piyumikabandula@gmail.com',2,6474045667,'2,LAKE RD,BRAMPTON');

INSERT INTO USERS_440 (USER_ID,USER_NAME,USER_PASSWORD,USER_EMAIL,ROLE_ID,CONTACT) VALUES 
(200675,'HELEN PEIRIS','hELEN145','helen.peiris@gmail.com',2,6547890345);

INSERT INTO USERS_440 (USER_ID,USER_NAME,USER_PASSWORD,USER_EMAIL,ROLE_ID,CONTACT) VALUES 
(200300,'KRITHIK KUMAR','krithik1','krithik.kumar@gmail.com',3,9085670999);

INSERT INTO USERS_440 (USER_ID,USER_NAME,USER_PASSWORD,USER_EMAIL,ROLE_ID,CONTACT) VALUES 
(210100,'BEULA PERERA','beula1234','beula.perera@hotmail.com',5,6475036767);

INSERT INTO USERS_440 (USER_ID,USER_NAME,USER_PASSWORD,USER_EMAIL,ROLE_ID,CONTACT,ADDRESS) VALUES 
(230745,'WINDY SHENON','windy1998','windy.shenon@gmail.com',7,5467897890,'2,TRISTAR RD,MISSISSAUGA');

// TABLE BOOKS_440

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(001,'Romeo and Juliet',1253679876,1597,10,'Tragedy renowned for poetry, iconic characters, and timeless themes.',0001,1466,4,'N002');

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(002,'Macbeth',1267899876,1623,2,'Tragedy renowned ambition, guilt, the corrupting influence of power, and the supernatural.',0001,1466,4,'N002');

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(1234,'HARRY POTTER',98607475327,1997,10,'SERIES OF SEVEN BOOKS OF FANTASY FOR CHILDREN',0001, 2246, 3, 'CF113');

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(1235,'HARRY POTTER',7866775345,1997,2,'SERIES OF SEVEN BOOKS OF FANTASY FOR CHILDREN',0002, 2246, 3, 'CF113');

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(2673,'PRIDE AND PREJUDICE',9780192827,1813,3,'Pride And Prejudice',0001,3457,3,'SC345');

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(1365,'On the Origin of Species',9780140439,1859,1,'Means of Natural Selection for Life',0001,3256,1,'HM768');
    
INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(1001,'Anna Karenina',7835626288,1877,3,'Themes of love, morality, and societal expectations',0001,3456,2,'RF005');

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(987,'War and Peace',5463733738,1869,2,'Lives of several aristocratic families in Russia during the Napoleonic Wars',0001,3456,2,'HF001');

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(023,'A Short History of Canada',9780771065082,2006,10,'Cultural shifts in Canadian History',0001,2246,'11H','H0234');

INSERT INTO BOOKS_440 (BOOK_ID,BOOK_TITLE,ISBN,PUBLICATION_YEAR,NUMBER_OF_COPIES,BOOK_DESCRIPTION,
LANGUAGE_ID,PUBLISHER_ID,SECTION_ID,CATEGORY_ID) VALUES
(024,'A Short History of Canada',9780771065182,2006,5,'Cultural shifts in Canadian History',0002,2246,'11H','H0234');

// TABLE BOOK_AUTHORS_440

INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (001,'N00001');
INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (002,'N00001');
INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (1234,'F00001');
INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (1235,'F00001');
INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (2673,'N00002');
INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (1365,'S00013');
INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (1001,'N00003');
INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (987,'N00003');
INSERT INTO BOOK_AUTHORS_440(BOOK_ID,AUTHOR_ID) VALUES (023,'H05969');
    
// TABLE COPIES_440

INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('001-1',001);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('001-2',001);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('002-1',002);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('1234-1',1234);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('1234-2',1234);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('1235-1',1235);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('2673-1',2673);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('1365-1',1365);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('1001-1',1001);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('987-1',987);
INSERT INTO COPIES_440(COPY_ID,BOOK_ID) VALUES ('023-1',023);  

// TABLE RESERVATIONS_440

INSERT INTO RESERVATIONS_440(RESERVATION_ID,USER_ID,COPY_ID,RESERVATION_DATE,EXPIRY_DATE) VALUES 
('200257',200045,'023-1',TO_DATE('2020-02-05','YYYY-MM-DD'),TO_DATE('2020-02-12','YYYY-MM-DD'));

INSERT INTO RESERVATIONS_440(RESERVATION_ID,USER_ID,COPY_ID,RESERVATION_DATE,EXPIRY_DATE) VALUES 
('200923',200300,'1234-2',TO_DATE('2020-09-18','YYYY-MM-DD'),TO_DATE('2020-09-25','YYYY-MM-DD'));

INSERT INTO RESERVATIONS_440(RESERVATION_ID,USER_ID,COPY_ID,RESERVATION_DATE,EXPIRY_DATE) VALUES 
('210612',200675,'1235-1',TO_DATE('2021-06-17','YYYY-MM-DD'),TO_DATE('2020-06-24','YYYY-MM-DD'));

INSERT INTO RESERVATIONS_440(RESERVATION_ID,USER_ID,COPY_ID,RESERVATION_DATE,EXPIRY_DATE) VALUES 
('220345',230745,'2673-1',TO_DATE('2020-03-25','YYYY-MM-DD'),TO_DATE('2022-04-01','YYYY-MM-DD'));

INSERT INTO RESERVATIONS_440(RESERVATION_ID,USER_ID,COPY_ID,RESERVATION_DATE,EXPIRY_DATE) VALUES 
('230732',210100,'1001-1',TO_DATE('2023-07-13','YYYY-MM-DD'),TO_DATE('2023-07-20','YYYY-MM-DD'));

INSERT INTO RESERVATIONS_440(RESERVATION_ID,USER_ID,COPY_ID,RESERVATION_DATE,EXPIRY_DATE) VALUES 
('230857',220005,'023-1',TO_DATE('2023-08-10','YYYY-MM-DD'),TO_DATE('2023-02-17','YYYY-MM-DD'));

// TABLE ISSUES_440

INSERT INTO ISSUES_440(ISSUE_ID,USER_ID,COPY_ID,ISSUE_DATE,DUE_DATE,RETURN_DATE,STATUS,FINE_AMOUNT) VALUES 
('200240',200045,'023-1',TO_DATE('2020-02-07','YYYY-MM-DD'),TO_DATE('2020-02-21','YYYY-MM-DD'),TO_DATE('2020-02-17','YYYY-MM-DD'),'RETURNED',0);

INSERT INTO ISSUES_440(ISSUE_ID,USER_ID,COPY_ID,ISSUE_DATE,DUE_DATE,RETURN_DATE,STATUS,FINE_AMOUNT) VALUES 
('200934',200300,'1234-2',TO_DATE('2020-09-20','YYYY-MM-DD'),TO_DATE('2020-10-05','YYYY-MM-DD'),TO_DATE('2020-10-10','YYYY-MM-DD'),'RETURNED',50);

INSERT INTO ISSUES_440(ISSUE_ID,USER_ID,COPY_ID,ISSUE_DATE,DUE_DATE,RETURN_DATE,STATUS,FINE_AMOUNT) VALUES 
('210620',200675,'1235-1',TO_DATE('2021-06-21','YYYY-MM-DD'),TO_DATE('2020-07-04','YYYY-MM-DD'),TO_DATE('2020-07-10','YYYY-MM-DD'),'RETURNED',60);

INSERT INTO ISSUES_440(ISSUE_ID,USER_ID,COPY_ID,ISSUE_DATE,DUE_DATE,RETURN_DATE,STATUS,FINE_AMOUNT) VALUES 
('220350',230745,'2673-1',TO_DATE('2020-04-01','YYYY-MM-DD'),TO_DATE('2022-04-15','YYYY-MM-DD'),TO_DATE('2022-04-12','YYYY-MM-DD'),'RETURNED',0);

INSERT INTO ISSUES_440(ISSUE_ID,USER_ID,COPY_ID,ISSUE_DATE,DUE_DATE,STATUS) VALUES 
('230736',210100,'1001-1',TO_DATE('2023-07-14','YYYY-MM-DD'),TO_DATE('2023-07-28','YYYY-MM-DD'),'BORROWED');

INSERT INTO ISSUES_440(ISSUE_ID,USER_ID,COPY_ID,ISSUE_DATE,DUE_DATE,STATUS) VALUES 
('230812',220005,'023-1',TO_DATE('2023-08-11','YYYY-MM-DD'),TO_DATE('2023-08-25','YYYY-MM-DD'),'BORROWED');


////////////////////////////////////////////////////////////////////////////////////////////////////
// Display all the tables
////////////////////////////////////////////////////////////////////////////////////////////////////
SELECT * FROM AUTHORS_440;
SELECT * FROM LANGUAGES_440;
SELECT * FROM PUBLISHERS_440;
SELECT * FROM SECTIONS_440;
SELECT * FROM CATEGORIES_440;
SELECT * FROM ROLES_440;
SELECT * FROM USERS_440;
SELECT * FROM BOOKS_440;
SELECT * FROM BOOK_AUTHORS_440;
SELECT * FROM COPIES_440;
SELECT * FROM RESERVATIONS_440;
SELECT * FROM ISSUES_440;

////////////////////////////////////////////////////////////////////////////////////////////////////
// CATEGORY A SQL QUERIES
////////////////////////////////////////////////////////////////////////////////////////////////////

// Select all the data from ROLES_440 table.
SELECT * FROM ROLES_440;

// Select all authors and biographies from AUTHORS_440 table
SELECT UPPER(AUTHOR_NAME) AS AUTHOR_NAME_440,AUTHOR_BIOGRAPHY FROM AUTHORS_440;

// Select all book title and book descriptions from BOOKS_440 table
SELECT DISTINCT UPPER(BOOK_TITLE), BOOK_DESCRIPTION FROM BOOKS_440;

// List user name and address as a single string for those who have address recorded in the database
SELECT USER_NAME || ', ' || ADDRESS AS MAILING_ADDRESS
FROM USERS_440 WHERE ADDRESS IS NOT NULL;

// List Users who Have Overdue Books
SELECT u.USER_NAME, i.ISSUE_DATE, i.DUE_DATE
FROM USERS_440 u
JOIN ISSUES_440 i ON u.USER_ID = i.USER_ID
WHERE i.RETURN_DATE IS NULL AND i.DUE_DATE < SYSDATE;


///////////////////////////////////////////////////////////////////////////////////////////////////
// CATEGORY B SQL QUERIES
////////////////////////////////////////////////////////////////////////////////////////////////////

// List books published after the year 2000 using > operator.
SELECT DISTINCT BOOK_TITLE, PUBLICATION_YEAR
FROM BOOKS_440
WHERE PUBLICATION_YEAR > 2000;

// Find expired reservations which were not borrowed at that time period.
SELECT RESERVATION_ID, USER_ID, COPY_ID, EXPIRY_DATE
FROM RESERVATIONS_440
WHERE EXPIRY_DATE < SYSDATE;

// Find Book titles written by a Leo Tolstoy
SELECT b.BOOK_TITLE, a.AUTHOR_NAME, a.AUTHOR_BIOGRAPHY
FROM BOOKS_440 b
JOIN BOOK_AUTHORS_440 ba ON b.BOOK_ID = ba.BOOK_ID
JOIN AUTHORS_440 a ON ba.AUTHOR_ID = a.AUTHOR_ID
WHERE LOWER(a.AUTHOR_NAME) = 'leo tolstoy';

// Find authors whose books are not currently in the library
SELECT AUTHOR_NAME, AUTHOR_BIOGRAPHY
FROM AUTHORS_440
WHERE AUTHOR_ID NOT IN
(SELECT AUTHOR_ID FROM BOOK_AUTHORS_440);

// List book titles and their descriptions from 'HISTORICAL FICTION' ==> HF category.
SELECT BOOK_TITLE, BOOK_DESCRIPTION
FROM BOOKS_440
WHERE CATEGORY_ID LIKE '%HF%';

///////////////////////////////////////////////////////////////////////////////////////////////////
// CATEGORY C SQL QUERIES
////////////////////////////////////////////////////////////////////////////////////////////////////

// List users who will have to pay fines
SELECT u.USER_NAME,ROUND(SYSDATE-i.DUE_DATE) AS DAYS_OVERDUE FROM 
USERS_440 u 
JOIN ISSUES_440 i ON u.USER_ID = i.USER_ID
WHERE i.DUE_DATE < SYSDATE AND NOT i.STATUS = 'RETURNED';

// List the titles of books that are either in the "TRAGEDY" or in the "ROMANCE" category 
// and published before the year 1990
SELECT b.BOOK_TITLE
FROM BOOKS_440 b
JOIN CATEGORIES_440 c ON b.CATEGORY_ID = c.CATEGORY_ID
WHERE (UPPER(c.CATEGORY_NAME) = 'TRAGEDY' OR UPPER(c.CATEGORY_NAME) = 'ROMANCE') AND b.PUBLICATION_YEAR < 1990;
    
// Getting book titles and publication years from TRAGEDY category and 
// ordering in the descending order of the publication year
SELECT
    B.BOOK_TITLE,
    B.PUBLICATION_YEAR
FROM
    BOOKS_440 B
JOIN
    CATEGORIES_440 C ON B.CATEGORY_ID = C.CATEGORY_ID
WHERE
    C.CATEGORY_NAME = 'TRAGEDY'
ORDER BY
    B.PUBLICATION_YEAR DESC;

// We will use the OFFSET clause and FETCH NEXT clause to above example.
// OFFSET skips the first 1 row and the FETCH NEXT clause retrieves the next 5 rows 
// resulting only 1 record in this example.
SELECT
    B.BOOK_TITLE,
    B.PUBLICATION_YEAR
FROM
    BOOKS_440 B
JOIN
    CATEGORIES_440 C ON B.CATEGORY_ID = C.CATEGORY_ID
WHERE
    C.CATEGORY_NAME = 'TRAGEDY'
ORDER BY
    B.PUBLICATION_YEAR DESC
OFFSET 1 ROWS FETCH NEXT 5 ROWS ONLY;

// Total number of users associated with library
SELECT COUNT(*) AS TOTAL_USERS FROM USERS_440;

// Get total number of books for each author
SELECT AUTHOR_NAME,
(SELECT COUNT(*) FROM BOOK_AUTHORS_440 ba WHERE ba.AUTHOR_ID = a.AUTHOR_ID) AS TOTAL_BOOKS_IN_LIBRARY
FROM AUTHORS_440 a;

///////////////////////////////////////////////////////////////////////////////////////////////////
// CATEGORY D SQL QUERIES
////////////////////////////////////////////////////////////////////////////////////////////////////

// Total fine amount collected from all returned overdue books.
SELECT CONCAT('$',SUM(i.FINE_AMOUNT)) AS TOTAL_FINE_AMOUNT
FROM ISSUES_440 i
WHERE i.RETURN_DATE IS NOT NULL;

// Count the number of books published in each publication year
// The result will show the publication years along with the corresponding 
// counts of books published in those years.
SELECT
    PUBLICATION_YEAR,
    COUNT(*) AS NUMBER_OF_BOOKS
FROM BOOKS_440
GROUP BY PUBLICATION_YEAR
ORDER BY PUBLICATION_YEAR;

// List the books having MINIMUM of 2 language versions using GROUP BY and HAVING clauses
SELECT
    b.BOOK_TITLE,
    COUNT(*) AS NUMBER_OF_LANGUAGES_AVAILABLE
FROM BOOKS_440 b
JOIN LANGUAGES_440 l ON b.LANGUAGE_ID = L.LANGUAGE_ID
GROUP BY b.BOOK_TITLE
HAVING COUNT(*) > 1
ORDER BY b.BOOK_TITLE;

// List languages available for each book using the LISTAGG function
SELECT b.BOOK_TITLE,LISTAGG(l.LANGUAGE_NAME, ', ') WITHIN GROUP (ORDER BY l.LANGUAGE_NAME) AS LANGUAGES
FROM BOOKS_440 b
JOIN LANGUAGES_440 l ON b.LANGUAGE_ID = l.LANGUAGE_ID
GROUP BY b.BOOK_TITLE;

// List all users and put Null addresses as Brampton
SELECT USER_NAME, NVL(ADDRESS, 'Unknown')
FROM USERS_440;

// List the addresses of users from the USERS_440 table, but if the address is null, we will use user email as a fallback.
// The COALESCE function here is used to return the first non-null expression in a list of expressions. 
// If all the expressions in the list are null, it returns null.
SELECT USER_NAME,COALESCE(ADDRESS, USER_EMAIL) AS CONTACT_INFO
FROM USERS_440;

///////////////////////////////////////////////////////////////////////////////////////////////////
// CATEGORY E SQL QUERIES
////////////////////////////////////////////////////////////////////////////////////////////////////

// List Books by Category and Section
SELECT distinct b.BOOK_TITLE, c.CATEGORY_NAME, s.SECTION_NAME
FROM BOOKS_440 b
JOIN CATEGORIES_440 c ON b.CATEGORY_ID = c.CATEGORY_ID
JOIN SECTIONS_440 s ON b.SECTION_ID = s.SECTION_ID
ORDER BY s.SECTION_NAME, c.CATEGORY_NAME, b.BOOK_TITLE;

// Count the Number of Copies Available currently in the library for a given Book
SELECT b.BOOK_TITLE, b.NUMBER_OF_COPIES - COUNT(i.ISSUE_ID) AS AVAILABLE_COPIES, l.LANGUAGE_NAME
FROM BOOKS_440 b
LEFT JOIN COPIES_440 c ON b.BOOK_ID = c.BOOK_ID
LEFT JOIN ISSUES_440 i ON c.COPY_ID = i.COPY_ID
JOIN LANGUAGES_440 l ON b.LANGUAGE_ID = l.LANGUAGE_ID
WHERE LOWER(b.BOOK_TITLE) LIKE ('%history of canada%')
GROUP BY b.BOOK_TITLE, b.NUMBER_OF_COPIES,l.language_name;

// List all the authors in the database despite the library has their books or not.
SELECT DISTINCT a.AUTHOR_NAME, b.BOOK_TITLE
FROM AUTHORS_440 a
LEFT OUTER JOIN BOOK_AUTHORS_440 ba ON a.AUTHOR_ID = ba.AUTHOR_ID
LEFT OUTER JOIN BOOKS_440 b ON b.BOOK_ID = ba.BOOK_ID;

// Using Right Outer Join to get the same result.
SELECT DISTINCT a.AUTHOR_NAME, b.BOOK_TITLE AS AVAILABLE_IN_LIBRARY
FROM BOOK_AUTHORS_440 ba
RIGHT OUTER JOIN AUTHORS_440 a ON a.AUTHOR_ID = ba.AUTHOR_ID
LEFT OUTER JOIN BOOKS_440 b ON b.BOOK_ID = ba.BOOK_ID;

// Let's use SELF JOIN to join the USERS_440 table with itself based on the ROLE_ID column. 
// The condition u1.USER_ID <> u2.USER_ID ensures that we don't match a user with themselves. 
// This query will return pairs of users who share the same role.
SELECT u1.USER_NAME AS User1, u2.USER_NAME AS User2, r.ROLE_NAME
FROM USERS_440 u1
JOIN USERS_440 u2 ON u1.ROLE_ID = u2.ROLE_ID AND u1.USER_ID <> u2.USER_ID
JOIN ROLES_440 r ON u1.ROLE_ID = r.ROLE_ID;

///////////////////////////////////////////////////////////////////////////////////////////////////
// CATEGORY F SQL QUERIES
////////////////////////////////////////////////////////////////////////////////////////////////////

// UNION Operator retrieves book titles from the BOOKS_440 
// table and BOOK_AUTHORS table while remove duplicates.
SELECT BOOK_TITLE FROM BOOKS_440
UNION
SELECT b.BOOK_TITLE
FROM BOOK_AUTHORS_440 ba
JOIN BOOKS_440 b ON ba.BOOK_ID = b.BOOK_ID
ORDER BY BOOK_TITLE;

// Let's use INTERSECT keyword to get the user names of those 
// having fines greater than $10 in their history.
SELECT USER_NAME FROM
USERS_440 WHERE USER_ID IN 
(SELECT USER_ID FROM USERS_440
INTERSECT
SELECT USER_ID FROM ISSUES_440 WHERE FINE_AMOUNT > 10);

// Find books that do not have French translations in your database using MINUS set operaot.
// It will subtract the titles of books with French translations from the titles of all books. 
SELECT BOOK_TITLE
FROM BOOKS_440
MINUS
SELECT DISTINCT b.BOOK_TITLE
FROM BOOKS_440 b
JOIN LANGUAGES_440 l ON b.LANGUAGE_ID = l.LANGUAGE_ID
WHERE l.LANGUAGE_NAME = 'FRENCH';

// Let's use single-row subquery to retrieve information about a 
// book and its author using the BOOK_ID from the COPIES_440 table.
SELECT
    C.COPY_ID,
    B.BOOK_TITLE,
    (SELECT A.AUTHOR_NAME FROM AUTHORS_440 A WHERE A.AUTHOR_ID = 
    (SELECT BA.AUTHOR_ID FROM BOOK_AUTHORS_440 BA WHERE BA.BOOK_ID = B.BOOK_ID))
        AS AUTHOR_NAME
FROM
    COPIES_440 C
JOIN
    BOOKS_440 B ON C.BOOK_ID = B.BOOK_ID
WHERE
    C.COPY_ID = '001-1';

// Let's find books that have been borrowed by users using EXISTS correlated subquery.
SELECT
    B.BOOK_TITLE,
    U.USER_NAME,
    I.ISSUE_DATE,
    I.DUE_DATE
FROM
    BOOKS_440 B
JOIN
    COPIES_440 C ON B.BOOK_ID = C.BOOK_ID
JOIN
    ISSUES_440 I ON C.COPY_ID = I.COPY_ID
JOIN
    USERS_440 U ON I.USER_ID = U.USER_ID
WHERE
    EXISTS (
        SELECT 1
        FROM
            ISSUES_440 I2
        WHERE
            I2.COPY_ID = C.COPY_ID
            AND I2.STATUS = 'BORROWED'
    );
    
// Find books that have not been borrowed by users.
SELECT b.BOOK_TITLE
FROM BOOKS_440 b
WHERE NOT EXISTS (
    SELECT 1
    FROM ISSUES_440 i
    WHERE i.COPY_ID IN (
        SELECT c.COPY_ID
        FROM COPIES_440 c
        WHERE c.BOOK_ID = b.BOOK_ID
    )
);


///////////////////////////////////////////////////////////////////////////////////////////////////
// ADVANCE CATEGORY
////////////////////////////////////////////////////////////////////////////////////////////////////

// Calculate fine based on the issue date and due date of the books issued.
SELECT
    i.ISSUE_ID,
    u.USER_NAME,
    b.BOOK_TITLE,
    i.ISSUE_DATE,
    i.DUE_DATE,
    i.RETURN_DATE,
    i.STATUS,
    CASE
        WHEN i.DUE_DATE < i.RETURN_DATE THEN
            (i.RETURN_DATE - i.DUE_DATE) * 10 -- Fine is $10 per day overdue
        ELSE
            0
    END AS FINE_AMOUNT
FROM
    ISSUES_440 i
JOIN
    USERS_440 u ON i.USER_ID = u.USER_ID
JOIN
    COPIES_440 c ON i.COPY_ID = c.COPY_ID
JOIN
    BOOKS_440 b ON c.BOOK_ID = b.BOOK_ID
WHERE
    i.DUE_DATE < i.RETURN_DATE OR (i.DUE_DATE >= i.RETURN_DATE AND i.RETURN_DATE IS NOT NULL);


//This query will provide a list of book titles and their corresponding author 
//names for books published after the average publication year of all books in the BOOKS_440 table.
//The main query retrieves book titles and author names from the BOOKS_440 and the nested subquery result (aliased as A).
//The nested subquery retrieves book IDs and author names from the BOOK_AUTHORS_440 and AUTHORS_440 tables, respectively, using a JOIN to combine them.
//The main query then joins the result of the nested subquery (A) with the BOOKS_440 table based on the BOOK_ID column.
//The outer query's WHERE clause filters the results to include only books published after the average publication year of all books in the BOOKS_440 table.

SELECT
    DISTINCT B.BOOK_TITLE,
    A.AUTHOR_NAME
FROM
    BOOKS_440 B
JOIN
    (
        SELECT
            BA.BOOK_ID,
            AU.AUTHOR_NAME
        FROM
            BOOK_AUTHORS_440 BA
        JOIN
            AUTHORS_440 AU ON BA.AUTHOR_ID = AU.AUTHOR_ID
    ) A ON B.BOOK_ID = A.BOOK_ID
WHERE
    B.PUBLICATION_YEAR > (
        SELECT AVG(PUBLICATION_YEAR)
        FROM BOOKS_440
    );

// Let's get information about books, authors, publishers, languages, and available copies while 
// considering borrowing status and sorting the results 
// HAVING clause filters out books with no available copies.
// The results are ordered by the number of available copies in descending order and then by book title.
SELECT
    B.BOOK_TITLE,A.AUTHOR_NAME,P.PUBLISHER_NAME,L.LANGUAGE_NAME,COUNT(C.COPY_ID) AS AVAILABLE_COPIES
FROM BOOKS_440 B
JOIN (  SELECT BA.BOOK_ID,LISTAGG(AU.AUTHOR_NAME, ', ') WITHIN GROUP (ORDER BY AU.AUTHOR_NAME) AS AUTHOR_NAME
        FROM BOOK_AUTHORS_440 BA
        JOIN AUTHORS_440 AU ON BA.AUTHOR_ID = AU.AUTHOR_ID
        GROUP BY BA.BOOK_ID
    ) A ON B.BOOK_ID = A.BOOK_ID
JOIN PUBLISHERS_440 P ON B.PUBLISHER_ID = P.PUBLISHER_ID
JOIN LANGUAGES_440 L ON B.LANGUAGE_ID = L.LANGUAGE_ID
LEFT JOIN COPIES_440 C ON B.BOOK_ID = C.BOOK_ID
    AND C.COPY_ID NOT IN (SELECT COPY_ID FROM ISSUES_440 WHERE STATUS = 'BORROWED')
GROUP BY B.BOOK_TITLE, A.AUTHOR_NAME, P.PUBLISHER_NAME, L.LANGUAGE_NAME
HAVING COUNT(C.COPY_ID) > 0 
ORDER BY
    AVAILABLE_COPIES DESC,
    B.BOOK_TITLE;

//Find users who have borrowed books using correlated subquery.
SELECT USER_NAME
FROM USERS_440 U
WHERE EXISTS (
    SELECT 1
    FROM ISSUES_440 I
    JOIN COPIES_440 C ON I.COPY_ID = C.COPY_ID
    WHERE U.USER_ID = I.USER_ID
);

// List authors whom the library has more books than the average number of books per author in the library.
SELECT AUTHOR_NAME
FROM AUTHORS_440 a
WHERE (SELECT COUNT(*) FROM BOOK_AUTHORS_440 ba WHERE ba.AUTHOR_ID = a.AUTHOR_ID) >
      (SELECT AVG(COUNT(*)) FROM BOOK_AUTHORS_440 GROUP BY AUTHOR_ID);











